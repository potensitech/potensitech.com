name: Simple IndexNow and Search Engine Notification
on:
  repository_dispatch:
    types: [trigger-simple-index]
  workflow_dispatch:
    inputs:
      force_full_indexing:
        description: 'Force full sitemap indexing (not just recent)'
        required: false
        default: 'false'
        type: boolean
      regenerate_indexnow_key:
        description: 'Regenerate IndexNow key'
        required: false
        default: 'false'
        type: boolean
jobs:
  index-site:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'repository_dispatch' || (github.event.workflow_run && github.event.workflow_run.conclusion == 'success') }}
    
    env:
      INDEXNOW_KEY: ${{ secrets.INDEXNOW_KEY }}
      FORCE_FULL_INDEXING: ${{ github.event.inputs.force_full_indexing }}
      REGENERATE_KEY: ${{ github.event.inputs.regenerate_indexnow_key }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.14.0'
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm install axios toml crypto

    - name: Initialize IndexNow Configuration
      run: |
        echo "=== Initializing IndexNow Configuration ==="
        
        # Create indexing config if it doesn't exist
        mkdir -p core/tools
        
        cat << 'EOF' > core/tools/indexing-config.json
        {
          "searchConsoleApi": {
            "enabled": false,
            "credentialsPath": "./credentials/search-console.json"
          },
          "indexNow": {
            "enabled": true,
            "submitRecentOnly": true,
            "hoursThreshold": 24,
            "autoGenerate": true,
            "key": null,
            "autoGenerated": false,
            "generatedAt": null,
            "lastSubmission": {
              "timestamp": null,
              "urlCount": 0,
              "status": null
            },
            "validation": {
              "keyAccessible": false,
              "lastChecked": null
            }
          },
          "pingServices": {
            "retryAttempts": 3,
            "delayBetweenPings": 1000,
            "timeout": 15000,
            "services": [
              {
                "name": "Google",
                "enabled": false,
                "priority": "high",
                "note": "Google discontinued sitemap ping service"
              },
              {
                "name": "Bing",
                "enabled": false,
                "priority": "high",
                "note": "Bing discontinued sitemap ping service"
              },
              {
                "name": "Yandex",
                "enabled": true,
                "priority": "medium"
              }
            ]
          },
          "monitoring": {
            "logSubmissions": true,
            "trackSuccess": true,
            "alertOnFailure": false
          }
        }
        EOF
        
        echo "✓ IndexNow configuration initialized"

    - name: Handle IndexNow Key Regeneration
      if: github.event.inputs.regenerate_indexnow_key == 'true'
      run: |
        echo "=== Regenerating IndexNow Key ==="
        # Remove existing key from config
        node -e "
          const fs = require('fs');
          const config = JSON.parse(fs.readFileSync('core/tools/indexing-config.json', 'utf8'));
          delete config.indexNow.key;
          config.indexNow.autoGenerated = false;
          config.indexNow.validation.keyAccessible = false;
          fs.writeFileSync('core/tools/indexing-config.json', JSON.stringify(config, null, 2));
          console.log('✓ Removed existing key from config');
        "
        
        # Remove existing key files
        rm -f static/indexnow-key.txt
        rm -f public/indexnow-key.txt
        echo "✓ Existing key files removed - new key will be generated"

    - name: Configure Indexing Settings
      run: |
        echo "=== Configuring Indexing Settings ==="
        
        node -e "
          const fs = require('fs');
          const path = require('path');
          
          const configPath = 'core/tools/indexing-config.json';
          let config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
          
          // Apply workflow inputs
          if (process.env.FORCE_FULL_INDEXING === 'true') {
            config.indexNow.submitRecentOnly = false;
            console.log('✓ Configured for full sitemap indexing');
          } else {
            config.indexNow.submitRecentOnly = true;
            console.log('✓ Configured for recent URLs only');
          }
          
          fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
          console.log('✓ Indexing configuration updated');
        "

    - name: Auto-Configure IndexNow Key
      run: |
        echo "=== Auto-configuring IndexNow Key ==="
        
        node -e "
          const fs = require('fs');
          const crypto = require('crypto');
          const path = require('path');
          
          // Load configuration
          const configPath = 'core/tools/indexing-config.json';
          let config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
          
          let indexNowKey = process.env.INDEXNOW_KEY;
          let keyWasGenerated = false;
          
          // Check if key exists
          if (!indexNowKey) {
            console.log('⚠ IndexNow key not found in environment variables');
            
            // Check if key exists in config file
            if (config.indexNow && config.indexNow.key) {
              indexNowKey = config.indexNow.key;
              console.log('✓ Using existing key from config file');
            } else {
              // Generate new key - Use standard format for IndexNow
              indexNowKey = crypto.randomBytes(16).toString('hex');
              keyWasGenerated = true;
              console.log('✓ Generated new IndexNow key (32 characters)');
              
              // Save to config
              config.indexNow.key = indexNowKey;
              config.indexNow.enabled = true;
              config.indexNow.autoGenerated = true;
              config.indexNow.generatedAt = new Date().toISOString();
              
              fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
            }
          } else {
            console.log('✓ Using IndexNow key from environment variable');
            config.indexNow.key = indexNowKey;
            fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
          }
          
          // Generate key files
          const staticDir = 'static';
          const publicDir = 'public';
          
          if (!fs.existsSync(staticDir)) {
            fs.mkdirSync(staticDir, { recursive: true });
          }
          if (!fs.existsSync(publicDir)) {
            fs.mkdirSync(publicDir, { recursive: true });
          }
          
          fs.writeFileSync(path.join(staticDir, 'indexnow-key.txt'), indexNowKey);
          fs.writeFileSync(path.join(publicDir, 'indexnow-key.txt'), indexNowKey);
          
          console.log('✓ IndexNow key files created');
          console.log('Key length:', indexNowKey.length, 'characters');
          
          if (keyWasGenerated) {
            console.log('\\n📋 IMPORTANT: New IndexNow key generated!');
            console.log('Add this to your GitHub Secrets as INDEXNOW_KEY:');
            console.log(indexNowKey);
          }
        "

    - name: Get Base URL and Site Info
      run: |
        echo "=== Getting Site Information ==="
        
        node -e "
          const fs = require('fs');
          const toml = require('toml');
          
          try {
            const configContent = fs.readFileSync('config.toml', 'utf-8');
            const config = toml.parse(configContent);
            const baseUrl = config.baseURL.endsWith('/') ? config.baseURL.slice(0, -1) : config.baseURL;
            
            console.log('Base URL:', baseUrl);
            process.env.SITE_BASE_URL = baseUrl;
            
            // Write to GitHub environment
            const envFile = process.env.GITHUB_ENV;
            fs.appendFileSync(envFile, \`SITE_BASE_URL=\${baseUrl}\\n\`);
            
          } catch (error) {
            console.error('Error reading config:', error.message);
            const fallbackUrl = 'https://your-domain.com';
            fs.appendFileSync(process.env.GITHUB_ENV, \`SITE_BASE_URL=\${fallbackUrl}\\n\`);
          }
        "

    - name: Wait for Deployment and Test Key Accessibility
      run: |
        echo "=== Testing IndexNow Key Accessibility ==="
        
        # Wait longer for deployment to complete
        echo "Waiting 30 seconds for deployment to settle..."
        sleep 30
        
        # Test key file accessibility with retries
        MAX_RETRIES=5
        RETRY_COUNT=0
        KEY_ACCESSIBLE=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$KEY_ACCESSIBLE" = false ]; do
          RETRY_COUNT=$((RETRY_COUNT + 1))
          echo "Attempt $RETRY_COUNT/$MAX_RETRIES: Testing key accessibility..."
          
          if curl -f -s "$SITE_BASE_URL/indexnow-key.txt" > /dev/null 2>&1; then
            echo "✅ IndexNow key file is publicly accessible"
            KEY_ACCESSIBLE=true
            
            # Verify key content matches local
            DEPLOYED_KEY=$(curl -s "$SITE_BASE_URL/indexnow-key.txt" | tr -d '\\n\\r')
            if [[ -f "public/indexnow-key.txt" ]]; then
              LOCAL_KEY=$(cat public/indexnow-key.txt | tr -d '\\n\\r')
              
              echo "Local key length: ${#LOCAL_KEY}"
              echo "Deployed key length: ${#DEPLOYED_KEY}"
              
              if [[ "$DEPLOYED_KEY" == "$LOCAL_KEY" ]]; then
                echo "✅ Deployed key matches local key"
                
                # Update config with validation success
                node -e "
                  const fs = require('fs');
                  const config = JSON.parse(fs.readFileSync('core/tools/indexing-config.json', 'utf8'));
                  config.indexNow.validation.keyAccessible = true;
                  config.indexNow.validation.lastChecked = new Date().toISOString();
                  fs.writeFileSync('core/tools/indexing-config.json', JSON.stringify(config, null, 2));
                  console.log('✓ Updated config with validation success');
                "
                
                break
              else
                echo "⚠️ Key mismatch detected"
                echo "Local: $LOCAL_KEY"
                echo "Deployed: $DEPLOYED_KEY"
              fi
            fi
          else
            echo "⚠️ IndexNow key file not accessible (attempt $RETRY_COUNT)"
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Waiting 15 seconds before retry..."
              sleep 15
            fi
          fi
        done
        
        if [ "$KEY_ACCESSIBLE" = false ]; then
          echo "❌ IndexNow key file is not accessible after $MAX_RETRIES attempts"
          echo "This may prevent IndexNow submission from working"
        fi

    - name: Submit URLs to IndexNow
      run: |
        echo "=== Submitting URLs to IndexNow ==="
        
        node -e "
          const axios = require('axios');
          const fs = require('fs');
          
          async function submitToIndexNow() {
            try {
              // Load configuration
              const config = JSON.parse(fs.readFileSync('core/tools/indexing-config.json', 'utf8'));
              const baseUrl = process.env.SITE_BASE_URL;
              
              if (!config.indexNow || !config.indexNow.enabled || !config.indexNow.key) {
                console.log('⚠ IndexNow not configured or disabled');
                return false;
              }
              
              // Check if key validation passed
              if (!config.indexNow.validation || !config.indexNow.validation.keyAccessible) {
                console.log('⚠ IndexNow key validation failed, skipping submission');
                return false;
              }
              
              console.log('Fetching sitemap from:', \`\${baseUrl}/sitemap.xml\`);
              
              // Get sitemap URLs with better error handling
              const sitemapResponse = await axios.get(\`\${baseUrl}/sitemap.xml\`, { 
                timeout: 15000,
                headers: { 
                  'User-Agent': 'IndexNow-Bot/1.0',
                  'Accept': 'application/xml, text/xml, */*'
                },
                validateStatus: (status) => status >= 200 && status < 400
              });
              
              if (!sitemapResponse.data) {
                console.log('❌ Empty sitemap response');
                return false;
              }
              
              console.log('Sitemap response length:', sitemapResponse.data.length);
              
              // Parse URLs from sitemap with better regex
              const urlMatches = sitemapResponse.data.match(/<loc>([^<]+)<\\/loc>/gi) || [];
              let urls = urlMatches.map(match => {
                const url = match.replace(/<\\/?loc>/gi, '').trim();
                return url;
              }).filter(url => url && url.startsWith('http'));
              
              console.log('URLs found in sitemap:', urls.length);
              
              if (urls.length === 0) {
                console.log('❌ No valid URLs found in sitemap');
                console.log('Sitemap content preview:', sitemapResponse.data.substring(0, 500));
                return false;
              }
              
              // Filter recent URLs if configured
              if (config.indexNow.submitRecentOnly) {
                console.log('Filtering for recent URLs...');
                // For now, submit all URLs as lastmod parsing is complex
                console.log(\`Found \${urls.length} total URLs (submitting all due to lastmod complexity)\`);
              }
              
              // Limit to IndexNow maximum
              urls = urls.slice(0, 10000);
              
              console.log(\`Preparing to submit \${urls.length} URLs to IndexNow...\`);
              console.log('Sample URLs:', urls.slice(0, 3));
              
              // Prepare payload with proper structure
              const hostname = new URL(baseUrl).hostname;
              const keyLocation = \`\${baseUrl}/indexnow-key.txt\`;
              
              const payload = {
                host: hostname,
                key: config.indexNow.key,
                keyLocation: keyLocation,
                urlList: urls
              };
              
              console.log('Payload info:');
              console.log('- Host:', hostname);
              console.log('- Key length:', config.indexNow.key.length);
              console.log('- Key location:', keyLocation);
              console.log('- URL count:', urls.length);
              
              // Submit to IndexNow with better error handling
              const response = await axios.post('https://api.indexnow.org/indexnow', payload, {
                headers: { 
                  'Content-Type': 'application/json; charset=utf-8',
                  'User-Agent': 'Hugo-IndexNow/1.0'
                },
                timeout: 30000,
                validateStatus: (status) => status >= 200 && status < 500
              });
              
              console.log('IndexNow API Response Status:', response.status);
              
              if (response.status === 200) {
                console.log(\`✅ IndexNow: Successfully submitted \${urls.length} URLs\`);
                
                // Update config with success info
                config.indexNow.lastSubmission = {
                  timestamp: new Date().toISOString(),
                  urlCount: urls.length,
                  status: 'success'
                };
                
                fs.writeFileSync('core/tools/indexing-config.json', JSON.stringify(config, null, 2));
                return true;
              } else if (response.status === 202) {
                console.log(\`✅ IndexNow: URLs accepted for processing (\${urls.length} URLs)\`);
                
                // Update config with success info
                config.indexNow.lastSubmission = {
                  timestamp: new Date().toISOString(),
                  urlCount: urls.length,
                  status: 'accepted'
                };
                
                fs.writeFileSync('core/tools/indexing-config.json', JSON.stringify(config, null, 2));
                return true;
              } else {
                throw new Error(\`IndexNow responded with status: \${response.status} - \${response.data || 'No response data'}\`);
              }
              
            } catch (error) {
              console.error(\`❌ IndexNow submission failed: \${error.message}\`);
              
              if (error.response) {
                console.error('Response status:', error.response.status);
                console.error('Response data:', error.response.data);
                console.error('Response headers:', JSON.stringify(error.response.headers, null, 2));
              }
              
              // Update config with failure info
              try {
                const config = JSON.parse(fs.readFileSync('core/tools/indexing-config.json', 'utf8'));
                config.indexNow.lastSubmission = {
                  timestamp: new Date().toISOString(),
                  urlCount: 0,
                  status: 'failed',
                  error: error.message,
                  httpStatus: error.response ? error.response.status : null
                };
                fs.writeFileSync('core/tools/indexing-config.json', JSON.stringify(config, null, 2));
              } catch (updateError) {
                console.error('Failed to update config:', updateError.message);
              }
              
              return false;
            }
          }
          
          submitToIndexNow();
        "

    - name: Ping Search Engines (Limited)
      run: |
        echo "=== Pinging Search Engines ==="
        
        node -e "
          const axios = require('axios');
          const fs = require('fs');
          
          async function pingSearchEngines() {
            const baseUrl = process.env.SITE_BASE_URL;
            const fullSitemapUrl = \`\${baseUrl}/sitemap.xml\`;
            const config = JSON.parse(fs.readFileSync('core/tools/indexing-config.json', 'utf8'));
            
            console.log(\`Pinging sitemap: \${fullSitemapUrl}\`);
            
            // Only ping services that are still active
            const services = config.pingServices.services.filter(service => service.enabled);
            
            console.log('Active ping services:', services.map(s => s.name).join(', '));
            
            if (services.length === 0) {
              console.log('ℹ No ping services enabled');
              return { successful: 0, failed: 0, total: 0 };
            }
            
            const results = { successful: 0, failed: 0, total: services.length };
            
            for (const service of services) {
              try {
                console.log(\`Pinging \${service.name}...\`);
                
                let pingUrl = '';
                if (service.name === 'Yandex') {
                  pingUrl = 'https://webmaster.yandex.com/ping?sitemap=';
                }
                
                if (!pingUrl) {
                  console.log(\`⚠ No ping URL configured for \${service.name}\`);
                  results.failed++;
                  continue;
                }
                
                const response = await axios.get(\`\${pingUrl}\${fullSitemapUrl}\`, { 
                  timeout: config.pingServices?.timeout || 15000,
                  validateStatus: (status) => status < 500
                });
                
                if (response.status >= 200 && response.status < 400) {
                  console.log(\`✓ Successfully pinged \${service.name} (\${response.status})\`);
                  results.successful++;
                } else {
                  console.log(\`⚠ \${service.name} responded with status \${response.status}\`);
                  results.failed++;
                }
                
              } catch (error) {
                console.error(\`✗ Failed to ping \${service.name}: \${error.message}\`);
                results.failed++;
              }
              
              // Delay between pings
              await new Promise(resolve => setTimeout(resolve, config.pingServices?.delayBetweenPings || 1000));
            }
            
            console.log(\`\\n📊 Ping Results: \${results.successful}/\${results.total} successful\`);
            return results;
          }
          
          pingSearchEngines();
        "

    - name: Generate Indexing Summary
      run: |
        echo "=== Generating Indexing Summary ==="
        
        cat << 'EOF' > indexing-summary.md
        # 🚀 Search Engine Indexing Summary
        
        ## ✅ Completed Tasks
        - [x] IndexNow configuration and key setup
        - [x] URL submission to IndexNow API
        - [x] Search engine notifications (where available)
        - [x] Key file accessibility verification
        
        ## 🔧 IndexNow Status
        EOF
        
        # Add IndexNow details from config
        node -e "
          const fs = require('fs');
          try {
            const config = JSON.parse(fs.readFileSync('core/tools/indexing-config.json', 'utf8'));
            console.log('- **Status:** ' + (config.indexNow?.enabled ? '✅ Enabled' : '❌ Disabled'));
            
            if (config.indexNow?.autoGenerated) {
              console.log('- **Key:** 🔑 Auto-generated (' + (config.indexNow.key ? config.indexNow.key.length : 0) + ' chars)');
            } else if (process.env.INDEXNOW_KEY) {
              console.log('- **Key:** 🔒 From environment variable');
            }
            
            if (config.indexNow?.validation) {
              const val = config.indexNow.validation;
              console.log('- **Key Accessible:** ' + (val.keyAccessible ? '✅ Yes' : '❌ No'));
              if (val.lastChecked) {
                console.log('- **Last Validation:** ' + val.lastChecked);
              }
            }
            
            if (config.indexNow?.lastSubmission) {
              const sub = config.indexNow.lastSubmission;
              console.log('- **Last Submission:** ' + sub.timestamp);
              console.log('- **URLs Submitted:** ' + sub.urlCount);
              console.log('- **Status:** ' + (sub.status === 'success' || sub.status === 'accepted' ? '✅' : '❌') + ' ' + sub.status);
              if (sub.error) {
                console.log('- **Error:** ' + sub.error);
              }
            }
          } catch (error) {
            console.log('- **Status:** ⚠️ Configuration not found');
          }
        " >> indexing-summary.md
        
        cat << EOF >> indexing-summary.md
        
        ## 🌐 URLs and Verification
        - **Site URL:** $SITE_BASE_URL
        - **Sitemap:** $SITE_BASE_URL/sitemap.xml
        - **IndexNow Key:** $SITE_BASE_URL/indexnow-key.txt
        - **Robots.txt:** $SITE_BASE_URL/robots.txt
        
        ## ℹ️ Important Notes
        - Google and Bing have discontinued their sitemap ping services
        - IndexNow is the recommended method for Bing and Yandex
        - For Google, use Google Search Console for manual submissions
        
        ## 📈 Next Steps
        1. Monitor IndexNow submissions in Bing Webmaster Tools
        2. Check Google Search Console for indexing status
        3. Verify site performance and accessibility
        4. Set up regular monitoring for failed submissions
        
        ---
        *Generated automatically by Simple Index Workflow*
        EOF
        
        echo "📋 Indexing Summary:"
        cat indexing-summary.md

    - name: Archive Indexing Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: indexing-artifacts-${{ github.run_number }}
        path: |
          indexing-summary.md
          core/tools/indexing-config.json
        retention-days: 30

    - name: Handle .gitignore Override for IndexNow Files
      run: |
        echo "=== Handling .gitignore Override for IndexNow Files ==="
        
        # Check if git add will work
        echo "Checking git status before adding files..."
        git status --porcelain
        
        # Force add the IndexNow configuration files (override .gitignore)
        echo "Force adding IndexNow configuration files..."
        git add -f core/tools/indexing-config.json || echo "⚠️ Could not force add indexing-config.json"
        git add static/indexnow-key.txt || echo "⚠️ indexnow-key.txt not found in static/"
        git add public/indexnow-key.txt || echo "⚠️ indexnow-key.txt not found in public/"
        
        # Check what files are staged
        echo "Files staged for commit:"
        git diff --staged --name-only || echo "No files staged"

    - name: Commit IndexNow Configuration
      run: |
        echo "=== Committing IndexNow Configuration ==="
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        git config --local pull.rebase false
        
        # Check if there are changes to commit
        if ! git diff --quiet --staged; then
          echo "IndexNow configuration changes detected, committing..."
          
          COMMIT_MSG="🔍 Update IndexNow configuration and keys"
          TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S UTC')
          COMMIT_MSG="$COMMIT_MSG - $TIMESTAMP"
          
          git commit -m "$COMMIT_MSG"
          echo "✓ IndexNow configuration committed successfully"
        else
          echo "ℹ No IndexNow configuration changes to commit"
        fi

    - name: Push IndexNow Configuration
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}

    - name: Final Verification and Cleanup
      run: |
        echo "=== Final Verification ==="
        
        # Test sitemap accessibility
        if curl -f -s "$SITE_BASE_URL/sitemap.xml" > /dev/null 2>&1; then
          echo "✅ Sitemap is accessible"
          
          # Get URL count from sitemap
          SITEMAP_URLS=$(curl -s "$SITE_BASE_URL/sitemap.xml" | grep -c '<loc>' || echo "0")
          echo "📊 Sitemap contains $SITEMAP_URLS URLs"
        else
          echo "⚠️ Sitemap accessibility issues detected"
        fi
        
        # Test robots.txt
        if curl -f -s "$SITE_BASE_URL/robots.txt" > /dev/null 2>&1; then
          echo "✅ Robots.txt is accessible"
        else
          echo "⚠️ Robots.txt not found"
        fi
        
        # Final IndexNow key test
        if curl -f -s "$SITE_BASE_URL/indexnow-key.txt" > /dev/null 2>&1; then
          echo "✅ Final IndexNow key verification successful"
          
          # Show key info
          DEPLOYED_KEY=$(curl -s "$SITE_BASE_URL/indexnow-key.txt" | tr -d '\n\r')
          echo "Key length: ${#DEPLOYED_KEY} characters"
        else
          echo "⚠️ IndexNow key final verification failed"
        fi

    - name: Send Success Notification
      if: success()
      run: |
        echo "=== Sending Success Notification ==="
        
        echo "🎉 Search engine indexing process completed!"
        echo "📈 Services that were notified:"
        echo "   • IndexNow API (for Bing, Yandex, and other participating engines)"
        echo "   • Yandex via sitemap ping (if enabled)"
        echo ""
        echo "⚠️ Note: Google and Bing sitemap ping services are no longer available"
        echo "📝 Use Google Search Console for Google indexing"
        echo "📝 Use Bing Webmaster Tools for Bing indexing"

    - name: Handle IndexNow Failures
      if: failure()
      run: |
        echo "=== Handling IndexNow Failures ==="
        
        # Log failure details
        echo "❌ Search engine indexing encountered issues"
        
        # Try to read last submission status
        if [[ -f "core/tools/indexing-config.json" ]]; then
          node -e "
            try {
              const config = JSON.parse(require('fs').readFileSync('core/tools/indexing-config.json', 'utf8'));
              if (config.indexNow && config.indexNow.lastSubmission) {
                const sub = config.indexNow.lastSubmission;
                console.log('Last submission attempt:', sub.timestamp);
                console.log('Status:', sub.status);
                if (sub.error) {
                  console.log('Error:', sub.error);
                }
                if (sub.httpStatus) {
                  console.log('HTTP Status:', sub.httpStatus);
                }
              }
            } catch (error) {
              console.log('Could not read submission status');
            }
          "
        fi
        
        echo ""
        echo "🔧 Troubleshooting steps:"
        echo "1. Check if IndexNow key is properly accessible at your domain"
        echo "2. Verify sitemap is valid XML and accessible"
        echo "3. Ensure IndexNow key is exactly 32 characters (16 bytes hex)"
        echo "4. Check network connectivity to IndexNow API"
        echo "5. Verify GitHub secrets are properly set"
        echo "6. Review IndexNow API response for specific error details"

    - name: Final Status Report
      if: always()
      run: |
        echo "=================================="
        echo "🔍 INDEXING PROCESS STATUS"
        echo "=================================="
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo "Status: ${{ job.status }}"
        
        if [[ "${{ github.event.workflow_run }}" ]]; then
          echo "Hugo Deploy Status: ${{ github.event.workflow_run.conclusion }}"
        fi
        
        echo "Site URL: $SITE_BASE_URL"
        echo "=================================="
        
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "🎉 Search engine indexing completed successfully!"
          echo "🚀 Your site has been submitted to:"
          echo "   • IndexNow API (Bing, Yandex, and participating engines)"
          echo "   • Yandex via sitemap ping (if enabled)"
          echo ""
          echo "⚠️ Important Notes:"
          echo "   • Google and Bing no longer accept sitemap pings"
          echo "   • Use Google Search Console for Google submissions"
          echo "   • Use Bing Webmaster Tools to monitor IndexNow submissions"
          echo ""
          echo "🔍 IndexNow key is active at: $SITE_BASE_URL/indexnow-key.txt"
          echo "📊 Sitemap is available at: $SITE_BASE_URL/sitemap.xml"
        else
          echo "⚠️ Indexing process completed with issues"
          echo "📝 Check the logs and consider manual submission"
          echo "🔧 IndexNow configuration may need attention"
          echo ""
          echo "Manual alternatives:"
          echo "• Submit sitemap directly in Google Search Console"
          echo "• Use Bing Webmaster Tools for Bing indexing"
          echo "• Check IndexNow key accessibility and format"
        fi
        echo "=================================="

    - name: Cleanup and Optimize
      if: always()
      run: |
        echo "=== Cleanup and Optimization ==="
        
        # Clean up any temporary files
        find . -name "*.tmp" -type f -delete 2>/dev/null || true
        find . -name "*.log" -type f -delete 2>/dev/null || true
        
        # Optimize IndexNow config file (remove any sensitive data from logs)
        if [[ -f "core/tools/indexing-config.json" ]]; then
          # Log config status without sensitive data
          node -e "
            const fs = require('fs');
            try {
              const config = JSON.parse(fs.readFileSync('core/tools/indexing-config.json', 'utf8'));
              console.log('✓ IndexNow config file optimized');
              console.log('Enabled:', config.indexNow?.enabled);
              console.log('Auto-generated:', config.indexNow?.autoGenerated);
              console.log('Key accessible:', config.indexNow?.validation?.keyAccessible);
              console.log('Last submission time:', config.indexNow?.lastSubmission?.timestamp);
              console.log('Last submission status:', config.indexNow?.lastSubmission?.status);
            } catch (error) {
              console.log('Config file not found or invalid');
            }
          "
        fi
        
        echo "✓ Cleanup completed"